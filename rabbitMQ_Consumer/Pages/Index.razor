@page "/"
@using RabbitMQ.Client
@using RabbitMQ.Client.Events
@using System.Text
@using System.Text.Json
@using rabbitMQ_Consumer.Models
@using rabbitMQ_Consumer.Services
@* @inject ProductRabbitMQConsumer productRabbitMqConsumer; *@
@implements IDisposable
<PageTitle>Index</PageTitle>
<h1>RabbitMQ implementations in blazor webassembly </h1>

<p>This component demonstrates fetching data from the RabbitMQ Server.</p>
@if (products != null && products.Any())
{
    <table class="table">
        <thead>
        <tr>
            <th>Description</th>
            <th>Name</th>
            <th>Price</th>
            <th>Stock</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var product in products)
        {
            <tr>
                <td>@product.Description</td>
                <td>@product.Name</td>
                <td>@product.Price</td>
                <td>@product.Stock</td>
            </tr>
        }
        </tbody>
    </table>
}

else
{
    <p><em>Loading...</em></p>
}


@code {
    private List<Product> products;
    CancellationTokenSource messageConsumerCancellationToken = new();
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ProductRabbitMQConsumer.MessageReceived += async (receivedMessage) =>
            {
                products = receivedMessage;
            };

            new ProductRabbitMQConsumer().Setup(messageConsumerCancellationToken.Token);
        }
    }
    // protected override void OnAfterRender(bool firstRender)
    // {
    //     if (!firstRender) return;
    //     productRabbitMqConsumer.ProductsChanged += async (receivedMessage) => toastService.ShowInfo(receivedMessage);
    //
    //     new Messaging.RabbitMQ().Setup(messageConsumerCancellationToken.Token);
    //     productRabbitMqConsumer.ProductsChanged  += OnProductsChanged;
    //     productRabbitMqConsumer.StartConsumingMessages();
    // }
    //
  

    public void Dispose()
    {
        messageConsumerCancellationToken.Cancel();
    }


}
